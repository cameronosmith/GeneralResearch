install.packages("rEDM")
c
clc
clera
clear
ls
git
install.packages("igraph")
libary(igraph)
library(igraph)
graph
graph(edges=c())
graph(edges=c("hi","fucku"))
install.packages("qgraph")
package.install("readr")
install.packages("readr")
install.packages("hht")
install.packages("smooth")
install.packages("mcomp")
install.packages("Mcomp")
library(deSolve)
# Package for interactive 3D plots
library(plotly)
lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dx <- sigma * (y - x)
dy <- x * (rho - z) - y
dz <- x * y - beta * z
list(c(dx, dy, dz))
})
}
# Specify parameters
parameters <- c(sigma = 10, beta = 8/3, rho = 28)
# Initial conditions, in the order x, y, z
state <- c(x = 2, y = 3, z = 4)
# Time over which the equations are numerically solved, 25 units
times <- seq(0, 25, 0.01)
# Solve the equations
sol <- as.data.frame(ode(y = state, times = times, func = lorenz, parms = parameters, method = "ode45"))
head(sol)
plot_ly(data = sol, x = ~x, y = ~y, z = ~z) %>%
add_paths(color = ~time) %>%
# Set where the camera is set by default
layout(scene = list(camera = list(eye = list(x = -1, y = 1, z = 0.25))))
library(plotly)
mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'Weight'),
yaxis = list(title = 'Gross horsepower'),
zaxis = list(title = '1/4 mile time')))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter3d-basic")
chart_link
p
View(p)
View(p)
View(p)
library(deSolve)
with(as.list(c(state, parameters)), {
dx <- sigma * (y - x)
dy <- x * (rho - z) - y
dz <- x * y - beta * z
list(c(dx, dy, dz))
})
library(rgl)
library(deSolve)
# Specify the equations
lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dx <- sigma * (y - x)
dy <- x * (rho - z) - y
dz <- x * y - beta * z
list(c(dx, dy, dz))
})
}
#Specify parameters
parameters <- c(sigma = 10, beta = 8/3, rho = 28)
# Initial conditions, in the order x, y, z
state <- c(x = 2, y = 3, z = 4)
# Time over which the equations are numerically solved, 25 units
times <- seq(0, 25, 0.01)
# Solve the equations
sol <- as.data.frame(ode(y = state, times = times, func = lorenz, parms = parameters, method = "ode45"))
head(sol)
#for(i in 1:nrow(sol)) {
#    row <- sol[i,]
#	points3d(row$x,row$y,row$z)
#}
plot3d(x=sol$x, y=sol$y, z=sol$z,
type="p", col="red", xlab="X", ylab="Y", zlab="Z",
size=3, lwd=25, box=F)
#
library(plotly)
library(deSolve)
# Specify the equations
lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dx <- sigma * (y - x)
dy <- x * (rho - z) - y
dz <- x * y - beta * z
list(c(dx, dy, dz))
})
}
#Specify parameters
parameters <- c(sigma = 10, beta = 8/3, rho = 28)
# Initial conditions, in the order x, y, z
state <- c(x = 2, y = 3, z = 4)
# Time over which the equations are numerically solved, 25 units
times <- seq(0, 25, 0.01)
# Solve the equations
sol <- as.data.frame(ode(y = state, times = times, func = lorenz, parms = parameters, method = "ode45"))
plot_ly(data = sol, x = ~x, y = ~y, z = ~z) %>%
add_paths(color = ~time) %>%
# Set where the camera is set by default
layout(scene = list(camera = list(eye = list(x = -1, y = 1, z = 0.25))))
source('~/ResearchCode/lorenz/LorenzData.R', echo=TRUE)
source('~/ResearchCode/lorenz/LorenzData.R', echo=TRUE)
source('~/ResearchCode/lorenz/LorenzData.R', echo=TRUE)
source('~/ResearchCode/lorenz/LorenzData.R', echo=TRUE)
source("LorenzGen.R")
setwd
setwd("Projects/ResearchCode/Lorenz/")
plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
p <- plot_ly(data, x = ~x, y = ~y, z = ~z, type = 'scatter3d', mode = 'lines',
opacity = 1, line = list(width = 6, color = ~color, reverscale = FALSE))
